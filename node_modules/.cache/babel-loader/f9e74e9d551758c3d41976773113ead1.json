{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\user\\\\Desktop\\\\Projects Ruchi\\\\Sorting Visualisation All\\\\Sorting-Visualization\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\Projects Ruchi\\\\Sorting Visualisation All\\\\Sorting-Visualization\\\\src\\\\SortingVisualizer\\\\SortingVisualizer.js\";\nimport React from 'react';\nimport './SortingVisualizer.css';\nimport { getMergeSortAnimations } from '../SortingAlgorithms/MergeSort';\nimport { getQuickSortAnimations } from '../SortingAlgorithms/QuickSort';\nimport { getInsertionSortAnimations } from '../SortingAlgorithms/InsertionSort';\nimport { getSelectionSortAnimations } from '../SortingAlgorithms/SelectionSort';\nimport { getBubbleSortAnimations } from '../SortingAlgorithms/BubbleSort';\nconst PRIMARY_COLOR = 'blue'; //Normal color of bars\n\nconst SECONDARY_COLOR = 'red'; //Color of bars when they are being compared\n\nconst ANIMATION_SPEED_MS = 1000; //Animation Speed (how fast color changes, how fast height gets overwritten)\n\nclass SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      array: []\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  } //Generates new random array \n\n\n  resetArray() {\n    const array = [];\n\n    for (let i = 0; i < 4; i++) {\n      array.push(randomIntformIntervals(5, 600));\n    }\n\n    this.setState({\n      array\n    });\n  }\n\n  mergeSort() {\n    const _getMergeSortAnimatio = getMergeSortAnimations(this.state.array),\n          _getMergeSortAnimatio2 = _slicedToArray(_getMergeSortAnimatio, 2),\n          animations = _getMergeSortAnimatio2[0],\n          sortArray = _getMergeSortAnimatio2[1];\n\n    console.log(animations);\n\n    for (let i = 0; i < animations.length; i++) {\n      const isColorChange = animations[i][0] == \"comparision1\" || animations[i][0] == \"comparision2\";\n      const arrayBars = document.getElementsByClassName('array-bar');\n\n      if (isColorChange === true) {\n        const _animations$i = _slicedToArray(animations[i], 3),\n              comparision = _animations$i[0],\n              barOneIndex = _animations$i[1],\n              barTwoIndex = _animations$i[2];\n\n        const color = animations[i][0] == \"comparision1\" ? SECONDARY_COLOR : PRIMARY_COLOR;\n        const barOneStyle = arrayBars[barOneIndex].style;\n        const barTwoStyle = arrayBars[barTwoIndex].style;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          const _animations$i2 = _slicedToArray(animations[i], 3),\n                overwrite = _animations$i2[0],\n                barOneIdx = _animations$i2[1],\n                newHeight = _animations$i2[2];\n\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = \"\".concat(newHeight, \"px\");\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n\n  quickSort() {\n    const _getQuickSortAnimatio = getQuickSortAnimations(this.state.array),\n          _getQuickSortAnimatio2 = _slicedToArray(_getQuickSortAnimatio, 2),\n          animations = _getQuickSortAnimatio2[0],\n          sortArray = _getQuickSortAnimatio2[1];\n\n    for (let i = 0; i < animations.length; i++) {\n      const isColorChange = animations[i][0] == \"comparision1\" || animations[i][0] == \"comparision2\";\n      const arrayBars = document.getElementsByClassName('array-bar');\n\n      if (isColorChange === true) {\n        const color = animations[i][0] == \"comparision1\" ? SECONDARY_COLOR : PRIMARY_COLOR;\n\n        const _animations$i3 = _slicedToArray(animations[i], 3),\n              comparision = _animations$i3[0],\n              barOneIndex = _animations$i3[1],\n              barTwoIndex = _animations$i3[2];\n\n        const barOneStyle = arrayBars[barOneIndex].style;\n        const barTwoStyle = arrayBars[barTwoIndex].style;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        const _animations$i4 = _slicedToArray(animations[i], 3),\n              swap = _animations$i4[0],\n              barIndex = _animations$i4[1],\n              newHeight = _animations$i4[2];\n\n        if (barIndex === -1) {\n          continue;\n        }\n\n        const barStyle = arrayBars[barIndex].style;\n        setTimeout(() => {\n          barStyle.height = \"\".concat(newHeight, \"px\");\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n\n  bubbleSort() {\n    const _getBubbleSortAnimati = getBubbleSortAnimations(this.state.array),\n          _getBubbleSortAnimati2 = _slicedToArray(_getBubbleSortAnimati, 2),\n          animations = _getBubbleSortAnimati2[0],\n          sortArray = _getBubbleSortAnimati2[1];\n\n    for (let i = 0; i < animations.length; i++) {\n      const isColorChange = animations[i][0] == \"comparision1\" || animations[i][0] == \"comparision2\";\n      const arrayBars = document.getElementsByClassName('array-bar');\n\n      if (isColorChange === true) {\n        const color = animations[i][0] == \"comparision1\" ? SECONDARY_COLOR : PRIMARY_COLOR;\n\n        const _animations$i5 = _slicedToArray(animations[i], 3),\n              comparision = _animations$i5[0],\n              barOneIndex = _animations$i5[1],\n              barTwoIndex = _animations$i5[2];\n\n        const barOneStyle = arrayBars[barOneIndex].style;\n        const barTwoStyle = arrayBars[barTwoIndex].style;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        const _animations$i6 = _slicedToArray(animations[i], 3),\n              swap = _animations$i6[0],\n              barIndex = _animations$i6[1],\n              newHeight = _animations$i6[2];\n\n        if (barIndex === -1) {\n          continue;\n        }\n\n        const barStyle = arrayBars[barIndex].style;\n        setTimeout(() => {\n          barStyle.height = \"\".concat(newHeight, \"px\");\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n\n  insertionSort() {\n    const _getInsertionSortAnim = getInsertionSortAnimations(this.state.array),\n          _getInsertionSortAnim2 = _slicedToArray(_getInsertionSortAnim, 2),\n          animations = _getInsertionSortAnim2[0],\n          sortArray = _getInsertionSortAnim2[1];\n\n    for (let i = 0; i < animations.length; i++) {\n      const isColorChange = animations[i][0] === \"comparision1\" || animations[i][0] === \"comparision2\";\n      const arrayBars = document.getElementsByClassName('array-bar');\n\n      if (isColorChange === true) {\n        const color = animations[i][0] === \"comparision1\" ? SECONDARY_COLOR : PRIMARY_COLOR;\n\n        const _animations$i7 = _slicedToArray(animations[i], 3),\n              temp = _animations$i7[0],\n              barOneIndex = _animations$i7[1],\n              barTwoIndex = _animations$i7[2];\n\n        const barOneStyle = arrayBars[barOneIndex].style;\n        const barTwoStyle = arrayBars[barTwoIndex].style;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        const _animations$i8 = _slicedToArray(animations[i], 3),\n              temp = _animations$i8[0],\n              barIndex = _animations$i8[1],\n              newHeight = _animations$i8[2];\n\n        const barStyle = arrayBars[barIndex].style;\n        setTimeout(() => {\n          barStyle.height = \"\".concat(newHeight, \"px\");\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n\n  selectionSort() {\n    const _getSelectionSortAnim = getSelectionSortAnimations(this.state.array),\n          _getSelectionSortAnim2 = _slicedToArray(_getSelectionSortAnim, 2),\n          animations = _getSelectionSortAnim2[0],\n          sortArray = _getSelectionSortAnim2[1];\n\n    for (let i = 0; i < animations.length; i++) {\n      const isColorChange = animations[i][0] === \"comparision1\" || animations[i][0] === \"comparision2\";\n      const arrayBars = document.getElementsByClassName('array-bar');\n\n      if (isColorChange === true) {\n        const color = animations[i][0] === \"comparision1\" ? SECONDARY_COLOR : PRIMARY_COLOR;\n\n        const _animations$i9 = _slicedToArray(animations[i], 3),\n              temp = _animations$i9[0],\n              barOneIndex = _animations$i9[1],\n              barTwoIndex = _animations$i9[2];\n\n        const barOneStyle = arrayBars[barOneIndex].style;\n        const barTwoStyle = arrayBars[barTwoIndex].style;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        const _animations$i10 = _slicedToArray(animations[i], 3),\n              temp = _animations$i10[0],\n              barIndex = _animations$i10[1],\n              newHeight = _animations$i10[2];\n\n        const barStyle = arrayBars[barIndex].style;\n        setTimeout(() => {\n          barStyle.height = \"\".concat(newHeight, \"px\");\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n\n  render() {\n    const array = this.state.array;\n    return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n      className: \"array-container\",\n      style: {\n        position: 'absolute',\n        right: \"20px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }, array.map((value, idx) => React.createElement(\"div\", {\n      className: \"array-bar\",\n      key: idx,\n      style: {\n        backgroundColor: PRIMARY_COLOR,\n        height: \"\".concat(value, \"px\")\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: \"but\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      style: {\n        position: 'relative',\n        marginBottom: '40px'\n      },\n      onClick: () => this.resetArray(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }, \"Generate\"), React.createElement(\"button\", {\n      id: \"mergeSort\",\n      style: {\n        position: 'relative',\n        marginBottom: '40px'\n      },\n      onClick: () => this.mergeSort(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }, \"MergeSort\"), React.createElement(\"button\", {\n      id: \"quickSort\",\n      style: {\n        position: 'relative',\n        marginBottom: '40px'\n      },\n      onClick: () => this.quickSort(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }, \"QuickSort\"), React.createElement(\"button\", {\n      id: \"bubbleSort\",\n      style: {\n        position: 'relative',\n        marginBottom: '40px'\n      },\n      onClick: () => this.bubbleSort(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }, \"BubbleSort\"), React.createElement(\"button\", {\n      id: \"insertionSort\",\n      style: {\n        position: 'relative',\n        marginBottom: '40px'\n      },\n      onClick: () => this.insertionSort(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }, \"InsertionSort\"), React.createElement(\"button\", {\n      id: \"selectionSort\",\n      style: {\n        position: 'relative',\n        marginBottom: '40px'\n      },\n      onClick: () => this.selectionSort(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197\n      },\n      __self: this\n    }, \"SelectionSort\")));\n  }\n\n}\n\nfunction randomIntformIntervals(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nexport default SortingVisualizer;","map":{"version":3,"sources":["C:/Users/user/Desktop/Projects Ruchi/Sorting Visualisation All/Sorting-Visualization/src/SortingVisualizer/SortingVisualizer.js"],"names":["React","getMergeSortAnimations","getQuickSortAnimations","getInsertionSortAnimations","getSelectionSortAnimations","getBubbleSortAnimations","PRIMARY_COLOR","SECONDARY_COLOR","ANIMATION_SPEED_MS","SortingVisualizer","Component","constructor","props","state","array","componentDidMount","resetArray","i","push","randomIntformIntervals","setState","mergeSort","animations","sortArray","console","log","length","isColorChange","arrayBars","document","getElementsByClassName","comparision","barOneIndex","barTwoIndex","color","barOneStyle","style","barTwoStyle","setTimeout","backgroundColor","overwrite","barOneIdx","newHeight","height","quickSort","swap","barIndex","barStyle","bubbleSort","insertionSort","temp","selectionSort","render","position","right","map","value","idx","marginBottom","min","max","Math","floor","random"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './SortingVisualizer.css';\nimport {getMergeSortAnimations} from '../SortingAlgorithms/MergeSort';\nimport {getQuickSortAnimations} from '../SortingAlgorithms/QuickSort';\nimport {getInsertionSortAnimations} from '../SortingAlgorithms/InsertionSort';\nimport {getSelectionSortAnimations} from '../SortingAlgorithms/SelectionSort';\nimport {getBubbleSortAnimations} from '../SortingAlgorithms/BubbleSort';\n\n\n\nconst PRIMARY_COLOR = 'blue'; //Normal color of bars\nconst SECONDARY_COLOR = 'red'; //Color of bars when they are being compared\nconst ANIMATION_SPEED_MS = 1000; //Animation Speed (how fast color changes, how fast height gets overwritten)\n\n\n\nclass SortingVisualizer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            array: []\n        };\n    }\n    componentDidMount() {\n        this.resetArray();\n    }\n    //Generates new random array \n    resetArray() {\n        const array = [];\n        for(let i = 0; i < 4; i++) {\n            array.push(randomIntformIntervals(5, 600));\n        }\n        this.setState({array});\n    }\n    \n    mergeSort() {\n        const [animations,sortArray] = getMergeSortAnimations(this.state.array);\n        console.log(animations);\n        for (let i = 0; i < animations.length; i++) {\n            const isColorChange = animations[i][0] == \"comparision1\" || animations[i][0] == \"comparision2\";\n            const arrayBars = document.getElementsByClassName('array-bar');\n            if(isColorChange === true) {\n                const [comparision, barOneIndex, barTwoIndex] = animations[i];\n                const color = (animations[i][0] == \"comparision1\") ? SECONDARY_COLOR : PRIMARY_COLOR;\n                const barOneStyle = arrayBars[barOneIndex].style;\n                const barTwoStyle = arrayBars[barTwoIndex].style;\n               \n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                },i * ANIMATION_SPEED_MS);\n                \n            }\n            else {\n                setTimeout(() => {\n                    const [overwrite, barOneIdx, newHeight] = animations[i];\n                    const barOneStyle = arrayBars[barOneIdx].style;\n                    barOneStyle.height = `${newHeight}px`;\n                  },i * ANIMATION_SPEED_MS);\n            }\n        }\n    \n    }\n    quickSort() {\n\n        const [animations,sortArray] = getQuickSortAnimations(this.state.array);\n        for (let i = 0; i < animations.length; i++) {\n            const isColorChange = animations[i][0] == \"comparision1\" || animations[i][0] == \"comparision2\";\n            const arrayBars = document.getElementsByClassName('array-bar');\n            if(isColorChange === true) {\n                const color = (animations[i][0] == \"comparision1\") ? SECONDARY_COLOR : PRIMARY_COLOR;\n                const [comparision, barOneIndex, barTwoIndex] = animations[i];\n                const barOneStyle = arrayBars[barOneIndex].style;\n                const barTwoStyle = arrayBars[barTwoIndex].style;\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                },i * ANIMATION_SPEED_MS);\n            }\n            else {\n                const [swap, barIndex, newHeight] = animations[i];\n                if (barIndex === -1) {\n                    continue;\n                }\n                const barStyle = arrayBars[barIndex].style;\n                setTimeout(() => {\n                    barStyle.height = `${newHeight}px`;\n                },i * ANIMATION_SPEED_MS);  \n            }        \n        } \n    }\n    bubbleSort() {\n        const [animations,sortArray] = getBubbleSortAnimations(this.state.array);\n        for (let i = 0; i < animations.length; i++) {\n            const isColorChange = animations[i][0] == \"comparision1\" || animations[i][0] == \"comparision2\";\n            const arrayBars = document.getElementsByClassName('array-bar');\n            if(isColorChange === true) {\n                const color = (animations[i][0] == \"comparision1\") ? SECONDARY_COLOR : PRIMARY_COLOR;\n                const [comparision, barOneIndex, barTwoIndex] = animations[i];\n                const barOneStyle = arrayBars[barOneIndex].style;\n                const barTwoStyle = arrayBars[barTwoIndex].style;\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                },i * ANIMATION_SPEED_MS);\n            }\n            else {\n                const [swap, barIndex, newHeight] = animations[i];\n                if (barIndex === -1) {\n                    continue;\n                }\n                const barStyle = arrayBars[barIndex].style;\n                setTimeout(() => {\n                    barStyle.height = `${newHeight}px`;\n                },i * ANIMATION_SPEED_MS);\n            }\n        }\n\n        \n\n    }\n    insertionSort() {\n\n        const [animations,sortArray] = getInsertionSortAnimations(this.state.array);\n        for (let i = 0; i < animations.length; i++) {\n            const isColorChange = (animations[i][0] === \"comparision1\") || (animations[i][0] === \"comparision2\");\n            const arrayBars = document.getElementsByClassName('array-bar');\n            if(isColorChange === true) {\n                const color = (animations[i][0] === \"comparision1\") ? SECONDARY_COLOR : PRIMARY_COLOR;\n                const [temp, barOneIndex, barTwoIndex] = animations[i];\n                const barOneStyle = arrayBars[barOneIndex].style;\n                const barTwoStyle = arrayBars[barTwoIndex].style;\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                },i * ANIMATION_SPEED_MS);\n            }\n            else {\n                const [temp, barIndex, newHeight] = animations[i];\n                const barStyle = arrayBars[barIndex].style;\n                setTimeout(() => {\n                    barStyle.height = `${newHeight}px`;\n                },i * ANIMATION_SPEED_MS);\n            }\n        }\n        \n        \n    }\n    selectionSort() {\n        const [animations,sortArray] = getSelectionSortAnimations(this.state.array);\n        for (let i = 0; i < animations.length; i++) {\n            const isColorChange = (animations[i][0] === \"comparision1\") || (animations[i][0] === \"comparision2\");\n            const arrayBars = document.getElementsByClassName('array-bar');\n            if(isColorChange === true) {\n                const color = (animations[i][0] === \"comparision1\") ? SECONDARY_COLOR : PRIMARY_COLOR;\n                const [temp, barOneIndex, barTwoIndex] = animations[i];\n                const barOneStyle = arrayBars[barOneIndex].style;\n                const barTwoStyle = arrayBars[barTwoIndex].style;\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                },i * ANIMATION_SPEED_MS);\n            }\n            else {\n                const [temp, barIndex, newHeight] = animations[i];\n                const barStyle = arrayBars[barIndex].style;\n                setTimeout(() => {\n                    barStyle.height = `${newHeight}px`;\n                },i * ANIMATION_SPEED_MS);\n            }\n        }\n        \n    }\n    render() {\n        const array = this.state.array;\n        return(\n            <>\n            <div className=\"array-container\" style={{position:'absolute', right:`20px`}}>\n                {array.map((value, idx) => (\n                    <div\n                        className=\"array-bar\"\n                        key={idx}\n                        style={{\n                        backgroundColor: PRIMARY_COLOR,\n                        height: `${value}px`\n                        }}\n                    ></div>\n                ))}\n            </div>\n            <div className=\"but\" >\n                <button style={{position:'relative', marginBottom: '40px'}} onClick={() => this.resetArray()}>Generate</button>\n\n                <button id = \"mergeSort\" style={{position:'relative',marginBottom: '40px'}} onClick={() => this.mergeSort()}>MergeSort</button>\n                <button id = \"quickSort\" style={{position:'relative',marginBottom: '40px'}} onClick={() => this.quickSort()}>QuickSort</button>\n                <button id = \"bubbleSort\" style={{position:'relative',marginBottom: '40px'}} onClick={() => this.bubbleSort()}>BubbleSort</button>\n                <button id = \"insertionSort\" style={{position:'relative',marginBottom: '40px'}} onClick={() => this.insertionSort()}>InsertionSort</button>\n                <button id = \"selectionSort\" style={{position:'relative',marginBottom: '40px'}} onClick={() => this.selectionSort()}>SelectionSort</button>\n            </div>\n            </>\n        );\n    }\n}\n\nfunction randomIntformIntervals(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nexport default SortingVisualizer;\n\n\n"]},"metadata":{},"sourceType":"module"}