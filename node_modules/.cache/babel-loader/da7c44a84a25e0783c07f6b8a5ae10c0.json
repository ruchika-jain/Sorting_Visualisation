{"ast":null,"code":"export function getQuickSortAnimations(array) {\n  let animations = [];\n  let auxillaryArray = array.slice();\n  quickSort(auxillaryArray, 0, auxillaryArray.length - 1, animations);\n  const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n  console.log(\"sort works correctly? \", arraysAreEqual(javaScriptSortedArray, auxillaryArray));\n  array = auxillaryArray;\n  return [animations, array];\n}\n\nfunction quickSort(auxillaryArray, startIndex, endIndex, animations) {\n  let pivotIndex;\n\n  if (startIndex < endIndex) {\n    pivotIndex = partitionArray(auxillaryArray, startIndex, endIndex, animations);\n    quickSort(auxillaryArray, startIndex, pivotIndex - 1, animations);\n    quickSort(auxillaryArray, pivotIndex + 1, endIndex, animations);\n  }\n}\n\nfunction partitionArray(auxillaryArray, startIndex, endIndex, animations) {\n  let pivotIndex = randomIntFromInterval(startIndex, endIndex);\n  animations.push([\"comparision1\", pivotIndex, endIndex]);\n  animations.push([\"swap\", pivotIndex, auxillaryArray[endIndex]]);\n  animations.push([\"swap\", endIndex, auxillaryArray[pivotIndex]]);\n  animations.push([\"comparision2\", pivotIndex, endIndex]);\n  swap(auxillaryArray, pivotIndex, endIndex);\n  let lessTailIndex = startIndex;\n\n  for (let i = startIndex; i < endIndex; ++i) {\n    animations.push([\"comparision1\", i, endIndex]);\n    animations.push([\"comparision2\", i, endIndex]);\n\n    if (auxillaryArray[i] <= auxillaryArray[endIndex]) {\n      animations.push([\"comparision1\", i, lessTailIndex]);\n      animations.push([\"swap\", i, auxillaryArray[lessTailIndex]]);\n      animations.push([\"swap\", lessTailIndex, auxillaryArray[i]]);\n      animations.push([\"comparision2\", i, lessTailIndex]);\n      swap(auxillaryArray, i, lessTailIndex);\n      lessTailIndex++;\n    }\n  }\n\n  animations.push([\"comparision1\", lessTailIndex, endIndex]);\n  animations.push([\"swap\", endIndex, auxillaryArray[lessTailIndex]]);\n  animations.push([\"swap\", lessTailIndex, auxillaryArray[endIndex]]);\n  animations.push([\"comparision2\", lessTailIndex, endIndex]);\n  swap(auxillaryArray, lessTailIndex, endIndex);\n  return lessTailIndex;\n}\n\nfunction swap(auxillaryArray, firstIndex, secondIndex) {\n  let temp = auxillaryArray[firstIndex];\n  auxillaryArray[firstIndex] = auxillaryArray[secondIndex];\n  auxillaryArray[secondIndex] = temp;\n}\n\nfunction arraysAreEqual(firstArray, secondArray) {\n  if (firstArray.length !== secondArray.length) {\n    return false;\n  }\n\n  for (let i = 0; i < firstArray.length; i++) {\n    if (firstArray[i] !== secondArray[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}","map":{"version":3,"sources":["C:/Users/user/Desktop/Projects Ruchi/Sorting Visualisation All/Sorting-Visualization/src/SortingAlgorithms/QuickSort.js"],"names":["getQuickSortAnimations","array","animations","auxillaryArray","slice","quickSort","length","javaScriptSortedArray","sort","a","b","console","log","arraysAreEqual","startIndex","endIndex","pivotIndex","partitionArray","randomIntFromInterval","push","swap","lessTailIndex","i","firstIndex","secondIndex","temp","firstArray","secondArray","min","max","Math","floor","random"],"mappings":"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","sourcesContent":["export function getQuickSortAnimations(array) {\n    let animations  = [];\n    let auxillaryArray = array.slice();\n    quickSort(auxillaryArray, 0, auxillaryArray.length - 1, animations);\n    const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n    console.log(\"sort works correctly? \",arraysAreEqual(javaScriptSortedArray, auxillaryArray));\n    array = auxillaryArray;\n    return [animations, array];\n}\n\nfunction quickSort(auxillaryArray, startIndex, endIndex, animations) {\n    let pivotIndex;\n    if (startIndex < endIndex) {\n        pivotIndex = partitionArray(auxillaryArray, startIndex, endIndex, animations);\n        quickSort(auxillaryArray, startIndex, pivotIndex - 1, animations);\n        quickSort(auxillaryArray, pivotIndex + 1, endIndex, animations);\n    }\n}\n\nfunction partitionArray(auxillaryArray, startIndex, endIndex, animations) {\n    let pivotIndex = randomIntFromInterval(startIndex, endIndex);\n    \n    animations.push([\"comparision1\", pivotIndex, endIndex]);\n    animations.push([\"swap\", pivotIndex, auxillaryArray[endIndex]]);\n    animations.push([\"swap\", endIndex, auxillaryArray[pivotIndex]]);\n    animations.push([\"comparision2\", pivotIndex, endIndex]);\n    swap(auxillaryArray, pivotIndex, endIndex);\n\n    let lessTailIndex = startIndex;\n\n    for(let i = startIndex; i < endIndex; ++i) {\n        animations.push([\"comparision1\", i, endIndex]);\n        animations.push([\"comparision2\", i, endIndex]);\n        if(auxillaryArray[i] <= auxillaryArray[endIndex]) {\n            animations.push([\"comparision1\", i, lessTailIndex]);\n            animations.push([\"swap\", i, auxillaryArray[lessTailIndex]]);\n            animations.push([\"swap\", lessTailIndex, auxillaryArray[i]]);\n            animations.push([\"comparision2\", i, lessTailIndex]);\n            swap(auxillaryArray, i, lessTailIndex);\n            lessTailIndex++;\n        }\n    }\n    animations.push([\"comparision1\", lessTailIndex, endIndex]);\n    animations.push([\"swap\", endIndex, auxillaryArray[lessTailIndex]]);\n    animations.push([\"swap\", lessTailIndex, auxillaryArray[endIndex]]);\n    animations.push([\"comparision2\", lessTailIndex, endIndex]);\n    \n    swap(auxillaryArray, lessTailIndex, endIndex);\n    return lessTailIndex;\n}\n\nfunction swap(auxillaryArray, firstIndex, secondIndex) {\n    let temp = auxillaryArray[firstIndex];\n    auxillaryArray[firstIndex] = auxillaryArray[secondIndex];\n    auxillaryArray[secondIndex] = temp;\n}\n\nfunction arraysAreEqual(firstArray, secondArray) {\n    if (firstArray.length !== secondArray.length) {\n        return false;\n    }\n    for (let i = 0; i < firstArray.length; i++) {\n      if (firstArray[i] !== secondArray[i]) {\n        return false;\n      }\n    }\n    return true;\n}\n\nfunction randomIntFromInterval(min, max) {\n    // min and max included\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}\n"]},"metadata":{},"sourceType":"module"}