{"ast":null,"code":"export function getBubbleSortAnimations(array) {\n  let animations = [];\n  let auxillaryArray = array.slice();\n  bubbleSort(auxillaryArray, animations);\n  const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n  console.log(\"sort works correctly? \", arraysAreEqual(javaScriptSortedArray, auxillaryArray));\n  array = auxillaryArray;\n  return [animations, array];\n}\n\nfunction bubbleSort(auxillaryArray, animations) {\n  const N = auxillaryArray.length;\n  let iters = N - 1;\n\n  while (iters > 0) {\n    let swapped = false;\n\n    for (let i = 0; i < iters; ++i) {\n      animations.push([\"comparision1\", i, i + 1]);\n      animations.push([\"comparision2\", i, i + 1]);\n\n      if (auxillaryArray[i] > auxillaryArray[i + 1]) {\n        swapped = true;\n        animations.push([\"swap\", i, auxillaryArray[i + 1]]);\n        animations.push([\"swap\", i + 1, auxillaryArray[i]]);\n        swap(auxillaryArray, i, i + 1);\n      }\n    }\n\n    if (swapped === false) break;\n    iters--;\n  }\n}\n\nfunction swap(auxillaryArray, firstIndex, secondIndex) {\n  let temp = auxillaryArray[firstIndex];\n  auxillaryArray[firstIndex] = auxillaryArray[secondIndex];\n  auxillaryArray[secondIndex] = temp;\n}\n\nfunction arraysAreEqual(firstArray, secondArray) {\n  if (firstArray.length !== secondArray.length) {\n    return false;\n  }\n\n  for (let i = 0; i < firstArray.length; i++) {\n    if (firstArray[i] !== secondArray[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}","map":{"version":3,"sources":["C:/Users/user/Desktop/Projects Ruchi/Sorting Visualisation All/Sorting-Visualization/src/SortingAlgorithms/BubbleSort.js"],"names":["getBubbleSortAnimations","array","animations","auxillaryArray","slice","bubbleSort","javaScriptSortedArray","sort","a","b","console","log","arraysAreEqual","N","length","iters","swapped","i","push","swap","firstIndex","secondIndex","temp","firstArray","secondArray"],"mappings":"AAAA,OAAO,SAASA,uBAAT,CAAiCC,KAAjC,EAAwC;AAC3C,MAAIC,UAAU,GAAI,EAAlB;AACA,MAAIC,cAAc,GAAGF,KAAK,CAACG,KAAN,EAArB;AACAC,EAAAA,UAAU,CAACF,cAAD,EAAiBD,UAAjB,CAAV;AACA,QAAMI,qBAAqB,GAAGL,KAAK,CAACG,KAAN,GAAcG,IAAd,CAAmB,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,GAAGC,CAAjC,CAA9B;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAqCC,cAAc,CAACN,qBAAD,EAAwBH,cAAxB,CAAnD;AACAF,EAAAA,KAAK,GAAGE,cAAR;AACA,SAAO,CAACD,UAAD,EAAaD,KAAb,CAAP;AACH;;AAED,SAASI,UAAT,CAAoBF,cAApB,EAAoCD,UAApC,EAAgD;AAC5C,QAAMW,CAAC,GAAGV,cAAc,CAACW,MAAzB;AACA,MAAIC,KAAK,GAAGF,CAAC,GAAG,CAAhB;;AACA,SAAME,KAAK,GAAG,CAAd,EAAiB;AACb,QAAIC,OAAO,GAAG,KAAd;;AACA,SAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGF,KAAnB,EAA0B,EAAEE,CAA5B,EAA+B;AAC3Bf,MAAAA,UAAU,CAACgB,IAAX,CAAgB,CAAC,cAAD,EAAiBD,CAAjB,EAAoBA,CAAC,GAAG,CAAxB,CAAhB;AACAf,MAAAA,UAAU,CAACgB,IAAX,CAAgB,CAAC,cAAD,EAAiBD,CAAjB,EAAoBA,CAAC,GAAG,CAAxB,CAAhB;;AACA,UAAGd,cAAc,CAACc,CAAD,CAAd,GAAoBd,cAAc,CAACc,CAAC,GAAG,CAAL,CAArC,EAA8C;AAC1CD,QAAAA,OAAO,GAAG,IAAV;AACAd,QAAAA,UAAU,CAACgB,IAAX,CAAgB,CAAC,MAAD,EAASD,CAAT,EAAYd,cAAc,CAACc,CAAC,GAAG,CAAL,CAA1B,CAAhB;AACAf,QAAAA,UAAU,CAACgB,IAAX,CAAgB,CAAC,MAAD,EAASD,CAAC,GAAG,CAAb,EAAgBd,cAAc,CAACc,CAAD,CAA9B,CAAhB;AACAE,QAAAA,IAAI,CAAChB,cAAD,EAAiBc,CAAjB,EAAoBA,CAAC,GAAG,CAAxB,CAAJ;AACH;AACJ;;AACD,QAAGD,OAAO,KAAK,KAAf,EAAsB;AACtBD,IAAAA,KAAK;AACR;AACJ;;AAED,SAASI,IAAT,CAAchB,cAAd,EAA8BiB,UAA9B,EAA0CC,WAA1C,EAAuD;AACnD,MAAIC,IAAI,GAAGnB,cAAc,CAACiB,UAAD,CAAzB;AACAjB,EAAAA,cAAc,CAACiB,UAAD,CAAd,GAA6BjB,cAAc,CAACkB,WAAD,CAA3C;AACAlB,EAAAA,cAAc,CAACkB,WAAD,CAAd,GAA8BC,IAA9B;AACH;;AAED,SAASV,cAAT,CAAwBW,UAAxB,EAAoCC,WAApC,EAAiD;AAC7C,MAAID,UAAU,CAACT,MAAX,KAAsBU,WAAW,CAACV,MAAtC,EAA8C;AAC1C,WAAO,KAAP;AACH;;AACD,OAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGM,UAAU,CAACT,MAA/B,EAAuCG,CAAC,EAAxC,EAA4C;AAC1C,QAAIM,UAAU,CAACN,CAAD,CAAV,KAAkBO,WAAW,CAACP,CAAD,CAAjC,EAAsC;AACpC,aAAO,KAAP;AACD;AACF;;AACD,SAAO,IAAP;AACH","sourcesContent":["export function getBubbleSortAnimations(array) {\n    let animations  = [];\n    let auxillaryArray = array.slice();\n    bubbleSort(auxillaryArray, animations);\n    const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n    console.log(\"sort works correctly? \",arraysAreEqual(javaScriptSortedArray, auxillaryArray));\n    array = auxillaryArray;\n    return [animations, array];\n}\n\nfunction bubbleSort(auxillaryArray, animations) {\n    const N = auxillaryArray.length;\n    let iters = N - 1;\n    while(iters > 0) {\n        let swapped = false;\n        for(let i = 0; i < iters; ++i) {\n            animations.push([\"comparision1\", i, i + 1]);\n            animations.push([\"comparision2\", i, i + 1]);\n            if(auxillaryArray[i] > auxillaryArray[i + 1]) {\n                swapped = true;\n                animations.push([\"swap\", i, auxillaryArray[i + 1]]);\n                animations.push([\"swap\", i + 1, auxillaryArray[i]]);\n                swap(auxillaryArray, i, i + 1);\n            }\n        }\n        if(swapped === false) break;\n        iters--;\n    }\n}\n\nfunction swap(auxillaryArray, firstIndex, secondIndex) {\n    let temp = auxillaryArray[firstIndex];\n    auxillaryArray[firstIndex] = auxillaryArray[secondIndex];\n    auxillaryArray[secondIndex] = temp;\n}\n\nfunction arraysAreEqual(firstArray, secondArray) {\n    if (firstArray.length !== secondArray.length) {\n        return false;\n    }\n    for (let i = 0; i < firstArray.length; i++) {\n      if (firstArray[i] !== secondArray[i]) {\n        return false;\n      }\n    }\n    return true;\n}"]},"metadata":{},"sourceType":"module"}